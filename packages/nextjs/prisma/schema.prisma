// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id                    String              @id
  username              String              @unique
  email                 String?             @unique
  bio                   String?
  websiteUrl            String?
  avatarUrl             String?
  bannerUrl             String?
  profile               Profile?
  posts                 Post[]
  comments              Comment[]
  votes                 Vote[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([id, username, email])
}

model Profile {
  id                    String              @id @default(uuid())
  displayName           String
  firstName             String?
  lastName              String?
  cityRegion            String?
  country               String?
  primaryRole           String?
  professionalProfile   String?
  isStudent             Boolean             @default(false)
  githubUsername        String
  xUsername             String
  telegramUsername      String
  user                  User                @relation(fields: [userId], references: [id])
  userId                String              @unique
}

model Post {
  id                    String              @id @default(uuid())
  title                 String
  content               String
  mediaUrl              String
  tags                  String[]
  upvotes               Int                 @default(0)
  downvotes             Int                 @default(0)
  author                User                @relation(fields: [authorId], references: [id])
  authorId              String
  collaborators         String[]
  attesters             String[]       
  attestations          Attestation[]
  comments              Comment[]
  votes                 Vote[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Attestation {
  id                    String              @id @default(uuid())
  txId                  String              @unique
  chain                 Chain
  schemaId              String
  attester              String
  recipient             String
  emotion               String
  impact                Int
  attesterRole          String
  category              ShortCategory       @default(value: IMPACT_REPORT)
  post                  Post                @relation(fields: [postId], references: [id])
  postId                String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Comment {
  id                    String              @id @default(uuid())
  content               String
  upvotes               Int                 @default(0)
  downvotes             Int                 @default(0)
  author                User                @relation(fields: [authorId], references: [id])
  authorId              String
  post                  Post                @relation(fields: [postId], references: [id])
  postId                String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Vote {
  id                    Int       @id @default(autoincrement())
  voter                 User      @relation(fields: [voterId], references: [id])
  voterId               String
  post                  Post?     @relation(fields: [postId], references: [id])
  postId                String?
  voteValue             Int       // Values: -1 (downvote), 0 (no vote), 1 (upvote)
  createdAt             DateTime  @default(now())
}

enum Chain {
  OPTIMISM_MAINNET
}

enum ShortCategory {
  IMPACT_REPORT
  TRUE_STORY
}